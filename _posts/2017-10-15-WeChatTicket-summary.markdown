---
layout: post
title:  "微信抢票｜个人开发总结"
categories: 微信开发
tags: 微信
author: thss15fyt
description: 对开发过程进行了阶段划分和总结
---

微信抢票作为软件工程（3）课程的第一个开发项目，虽然是在半完成的框架上进行，整体开发周期也较短，但开发依然遇到了不少困难，本篇博客梳理了整个开发流程的各个阶段，留下一些感想总结，以备后用。

## 1. Code Review
**关键词**：Django, 微信, Restful

整个工程采用较为熟悉的Django框架，主要难点为微信相关的类与函数，以及Restful的设计思想，对这两部分有了基本的了解后，也就不难理解整个项目了。

微信部分处理url为`/wechat/`的请求，由于用户与服务器之间的沟通需要微信服务器进行处理，Request和Respnse内容均为微信定义的xml格式。其中GET请求只需返回`echostr`参数，用于验证；POST则是将xml内容根据模板转化后，逐个检查View中每个Handler的`check()`函数，check成功时将对应的`handle()`返回值处理后生成Response。

项目Restful的设计思想主要体现在，在前后端的交互中，前端获取信息的请求均通过`get()`函数实现，修改信息的请求均通过`post()`函数实现。后段返回数据也进行了规范，包含code, msg, data三个字段。定义前后端接口并进行规范化封装后，前端在需要向后端发送请求时只需按规范调用`api.get()`或`api.post()`，而后端也只需按规范实现每个功能的`get()`,`post()`函数即可。

## 2. 环境配置
**关键词**：nginx, uwsgi, 远程服务器

服务器端的配置参照了[How to Set Up My First Server?](https://blog.magichc7.com/?p=5&from=timeline)，采用nginx + uWSGI + Django + MariaDB的组合，nginx监听80端口并将消息转发给uWSGI服务器，后者处理后转交Django服务器，互传过程同理，而MariaDB则为Django提供数据库服务。

同时为了进行本地开发，在本地配置了nginx + Django + MySQL的简单组合，便于开发和调试，每次实现功能后再通过git上传至服务器。在清华内网不提供独立IP后及禁止外网访问后，为了继续进行本地开发，采用了内网穿透的方式，具体可参见博客 [微信抢票｜利用SSH端口转发实现内网穿透](https://thss15fyt.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/09/WeChatTicket-ssh-portforwarding.html)。

## 3. 初识微信
**关键词**：View-Handler

初识微信作业的任务为测试号及服务器的部署，并实现一个简单的表达式计算功能，目的在于对微信开发过程有初步的了解。部署过程参考文档即可，整体比较顺利；而表达式计算则是添加了一个名为`CalculateHandler`的handler，利用正则表达式进行检查，python自带的`value()`函数进行计算。
开发过程还发现了原有数据库设计中`User`的`student_id`字段的问题，最终采用手动维护unique属性的方法来解决这一问题。

## 4. 接口开发
**关键词**：api, GET, POST

接口开发的过程整体比较顺利，参照文档将`get()`,`post()`逐一实现后整个前后端交互便可以正常运行，过程中主要遇到的问题均为细节实现方面，如上传图片的时间戳重命名、UTC时间与时区时间的时差等。

## 5. 微信开发
**关键词**：微信

微信开发按照功能点添加相应的handler，并实现其`check()`,`handle()`即可，其中check过程由于handler基类中已封装了全面的判断函数，实现起来非常轻松；handle过程的重难点在于逻辑编写和回复消息格式的规范，逻辑编写应尽力应对所有可能出现的情形，而规范回复消息则采用了分离出消息模板的方式，便于随时更改消息内容，但需要注意调用`get_message()`函数包含消息模板需要的所有参数，这一部分可通过文档进行规范。

## 6. 测试
**关键词**：单元／功能测试, mock, fixtures, 性能测试

### 6.1 单元测试
单元测试是指针对开发出某一个单元的正确性进行测试，为此我们需要使用mock工具，将所有与这个单元对接的外部函数进行适当的mock，达到测试样例中所需的情形。在本次项目测试中，需要mock的主要为数据库操作相关的函数。

在每个测试函数中往往需要mock多个函数，但测试函数间相互独立，为了实现这一点，采用patcher数组的方式，在测试函数起始／结束时分别将所有mock对象统一开启／关闭。

测试样例设计：使用白盒测试方法，配合mock构造样例，实现对待测单元的语句覆盖。

### 6.2 功能测试
功能测试时针对开发的某个功能点进行测试，需要模拟用户行为，本项目的测试中使用了PhatomJS进行模拟。由于功能测试不再局限于某个单元中，不应再mock数据库操作，而是采用fixtures构造临时数据库，达到测试样例的需要。

测试样例设计：使用黑盒测试方法，针对功能点找出有效等价类和无效等价类，再分别进行构造和测试。

### 6.3 性能测试
本项目要求抢票功能具有较高的并发处理能力，为此使用JMeter对这一接口进行压力测试，通过修改并发线程数和并发时间，观察测试结果。结果表明服务器对较小规模线程数的短时间并发处理能力较强，但当线程数上升到500～1000规模时，处理能力偏弱。

## 7. 项目发布
**关键词**：nginx, uwsgi, release

项目发布的总结博客见 [微信抢票｜在服务器端部署项目的发布版本](https://thss15fyt.github.io/微信开发/2017/10/12/WeChatTicket-server-release.html)
