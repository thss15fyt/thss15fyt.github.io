<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>thss15fyt</title>
		<description>Welcome to my blog~</description>
		<link>http://localhost:4000</link>
		<atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Test.me｜中期个人总结</title>
				<description>&lt;p&gt;我们软件工程大作业的选题是Test.me大学生竞赛平台，目前开发已经过半，从以下几方面进行一下个人总结：&lt;/p&gt;

&lt;h2 id=&quot;个人开发&quot;&gt;个人开发&lt;/h2&gt;
&lt;p&gt;在本次项目的第一、二次开发中，我负责的是通用和参赛者部分的接口细节设计和后端开发，这部分整体开发过程比较顺利，常见的问题包括经常发现原有数据库设计和接口设计的缺陷，由于这部分属于公有部分，需要和团队其他人讨论后进行修改。&lt;br /&gt;
同时为了便于开发，我将常用的用户基础检查封装为装饰器，将常用的输入参数合法性检查封装检查函数，减少了检查部分的重复性代码；但现有的代码中仍存在类似问题，需要进一步优化。&lt;br /&gt;
现在的后端开发主要是基础的数据库相关操作，但后续的开发将应对高并发情况、着重数据安全、接入外部接口等，相应的开发难度会更大，因此在前期将基础部分规范好更有必要。&lt;/p&gt;

&lt;h2 id=&quot;团队合作&quot;&gt;团队合作&lt;/h2&gt;
&lt;p&gt;团队合作的过程不太顺利，主要与第一次进行前后端分离的团队开发有关，这对于前期的架构和接口设计具有很高的要求，尽可能减少后期开发中才发现的接口问题，因此每次迭代的这一阶段耗时较长，导致开发时间紧张。当然这也与团队成员分忙不同事情，缺少集中开发有关，在后续的开发中我们将安排强制性集中开发，尽可能避免这一问题。此外团队开发还存在git使用不熟练的问题，将在下一部分详述。&lt;/p&gt;

&lt;h2 id=&quot;gitlab使用&quot;&gt;gitlab使用&lt;/h2&gt;
&lt;p&gt;在了解了基础gitlab的敏捷开发规范后，我认为这样的规范是有利于小团队开发模式的。但这一规范在实际实施中还不够顺利，前期管理较为混乱，经过多次调整后，issue, board, milestone等的使用已经较为正规；但还存在commit粒度过粗、信息不规范等问题，将在接下的开发中尽可能更正。&lt;/p&gt;
</description>
				<pubDate>Fri, 24 Nov 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/test.me/2017/11/24/WeChatTicket-test-me-midterm-summary.html</link>
				<guid isPermaLink="true">http://localhost:4000/test.me/2017/11/24/WeChatTicket-test-me-midterm-summary.html</guid>
			</item>
		
			<item>
				<title>微信抢票｜个人开发总结</title>
				<description>&lt;p&gt;微信抢票作为软件工程（3）课程的第一个开发项目，虽然是在半完成的框架上进行，整体开发周期也较短，但开发依然遇到了不少困难，本篇博客梳理了整个开发流程的各个阶段，留下一些感想总结，以备后用。&lt;/p&gt;

&lt;h2 id=&quot;1-code-review&quot;&gt;1. Code Review&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：Django, 微信, Restful&lt;/p&gt;

&lt;p&gt;整个工程采用较为熟悉的Django框架，主要难点为微信相关的类与函数，以及Restful的设计思想，对这两部分有了基本的了解后，也就不难理解整个项目了。&lt;/p&gt;

&lt;p&gt;微信部分处理url为&lt;code class=&quot;highlighter-rouge&quot;&gt;/wechat/&lt;/code&gt;的请求，由于用户与服务器之间的沟通需要微信服务器进行处理，Request和Respnse内容均为微信定义的xml格式。其中GET请求只需返回&lt;code class=&quot;highlighter-rouge&quot;&gt;echostr&lt;/code&gt;参数，用于验证；POST则是将xml内容根据模板转化后，逐个检查View中每个Handler的&lt;code class=&quot;highlighter-rouge&quot;&gt;check()&lt;/code&gt;函数，check成功时将对应的&lt;code class=&quot;highlighter-rouge&quot;&gt;handle()&lt;/code&gt;返回值处理后生成Response。&lt;/p&gt;

&lt;p&gt;项目Restful的设计思想主要体现在，在前后端的交互中，前端获取信息的请求均通过&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;函数实现，修改信息的请求均通过&lt;code class=&quot;highlighter-rouge&quot;&gt;post()&lt;/code&gt;函数实现。后段返回数据也进行了规范，包含code, msg, data三个字段。定义前后端接口并进行规范化封装后，前端在需要向后端发送请求时只需按规范调用&lt;code class=&quot;highlighter-rouge&quot;&gt;api.get()&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;api.post()&lt;/code&gt;，而后端也只需按规范实现每个功能的&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;post()&lt;/code&gt;函数即可。&lt;/p&gt;

&lt;h2 id=&quot;2-环境配置&quot;&gt;2. 环境配置&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：nginx, uwsgi, 远程服务器&lt;/p&gt;

&lt;p&gt;服务器端的配置参照了&lt;a href=&quot;https://blog.magichc7.com/?p=5&amp;amp;from=timeline&quot;&gt;How to Set Up My First Server?&lt;/a&gt;，采用nginx + uWSGI + Django + MariaDB的组合，nginx监听80端口并将消息转发给uWSGI服务器，后者处理后转交Django服务器，互传过程同理，而MariaDB则为Django提供数据库服务。&lt;/p&gt;

&lt;p&gt;同时为了进行本地开发，在本地配置了nginx + Django + MySQL的简单组合，便于开发和调试，每次实现功能后再通过git上传至服务器。在清华内网不提供独立IP后及禁止外网访问后，为了继续进行本地开发，采用了内网穿透的方式，具体可参见博客 &lt;a href=&quot;https://thss15fyt.github.io/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/09/WeChatTicket-ssh-portforwarding.html&quot;&gt;微信抢票｜利用SSH端口转发实现内网穿透&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;3-初识微信&quot;&gt;3. 初识微信&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：View-Handler&lt;/p&gt;

&lt;p&gt;初识微信作业的任务为测试号及服务器的部署，并实现一个简单的表达式计算功能，目的在于对微信开发过程有初步的了解。部署过程参考文档即可，整体比较顺利；而表达式计算则是添加了一个名为&lt;code class=&quot;highlighter-rouge&quot;&gt;CalculateHandler&lt;/code&gt;的handler，利用正则表达式进行检查，python自带的&lt;code class=&quot;highlighter-rouge&quot;&gt;value()&lt;/code&gt;函数进行计算。
开发过程还发现了原有数据库设计中&lt;code class=&quot;highlighter-rouge&quot;&gt;User&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;student_id&lt;/code&gt;字段的问题，最终采用手动维护unique属性的方法来解决这一问题。&lt;/p&gt;

&lt;h2 id=&quot;4-接口开发&quot;&gt;4. 接口开发&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：api, GET, POST&lt;/p&gt;

&lt;p&gt;接口开发的过程整体比较顺利，参照文档将&lt;code class=&quot;highlighter-rouge&quot;&gt;get()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;post()&lt;/code&gt;逐一实现后整个前后端交互便可以正常运行，过程中主要遇到的问题均为细节实现方面，如上传图片的时间戳重命名、UTC时间与时区时间的时差等。&lt;/p&gt;

&lt;h2 id=&quot;5-微信开发&quot;&gt;5. 微信开发&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：微信&lt;/p&gt;

&lt;p&gt;微信开发按照功能点添加相应的handler，并实现其&lt;code class=&quot;highlighter-rouge&quot;&gt;check()&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;handle()&lt;/code&gt;即可，其中check过程由于handler基类中已封装了全面的判断函数，实现起来非常轻松；handle过程的重难点在于逻辑编写和回复消息格式的规范，逻辑编写应尽力应对所有可能出现的情形，而规范回复消息则采用了分离出消息模板的方式，便于随时更改消息内容，但需要注意调用&lt;code class=&quot;highlighter-rouge&quot;&gt;get_message()&lt;/code&gt;函数包含消息模板需要的所有参数，这一部分可通过文档进行规范。&lt;/p&gt;

&lt;h2 id=&quot;6-测试&quot;&gt;6. 测试&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：单元／功能测试, mock, fixtures, 性能测试&lt;/p&gt;

&lt;h3 id=&quot;61-单元测试&quot;&gt;6.1 单元测试&lt;/h3&gt;
&lt;p&gt;单元测试是指针对开发出某一个单元的正确性进行测试，为此我们需要使用mock工具，将所有与这个单元对接的外部函数进行适当的mock，达到测试样例中所需的情形。在本次项目测试中，需要mock的主要为数据库操作相关的函数。&lt;/p&gt;

&lt;p&gt;在每个测试函数中往往需要mock多个函数，但测试函数间相互独立，为了实现这一点，采用patcher数组的方式，在测试函数起始／结束时分别将所有mock对象统一开启／关闭。&lt;/p&gt;

&lt;p&gt;测试样例设计：使用白盒测试方法，配合mock构造样例，实现对待测单元的语句覆盖。&lt;/p&gt;

&lt;h3 id=&quot;62-功能测试&quot;&gt;6.2 功能测试&lt;/h3&gt;
&lt;p&gt;功能测试时针对开发的某个功能点进行测试，需要模拟用户行为，本项目的测试中使用了PhatomJS进行模拟。由于功能测试不再局限于某个单元中，不应再mock数据库操作，而是采用fixtures构造临时数据库，达到测试样例的需要。&lt;/p&gt;

&lt;p&gt;测试样例设计：使用黑盒测试方法，针对功能点找出有效等价类和无效等价类，再分别进行构造和测试。&lt;/p&gt;

&lt;h3 id=&quot;63-性能测试&quot;&gt;6.3 性能测试&lt;/h3&gt;
&lt;p&gt;本项目要求抢票功能具有较高的并发处理能力，为此使用JMeter对这一接口进行压力测试，通过修改并发线程数和并发时间，观察测试结果。结果表明服务器对较小规模线程数的短时间并发处理能力较强，但当线程数上升到500～1000规模时，处理能力偏弱。&lt;/p&gt;

&lt;h2 id=&quot;7-项目发布&quot;&gt;7. 项目发布&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;关键词&lt;/strong&gt;：nginx, uwsgi, release&lt;/p&gt;

&lt;p&gt;项目发布的总结博客见 &lt;a href=&quot;https://thss15fyt.github.io/微信开发/2017/10/12/WeChatTicket-server-release.html&quot;&gt;微信抢票｜在服务器端部署项目的发布版本&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 15 Oct 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/15/WeChatTicket-summary.html</link>
				<guid isPermaLink="true">http://localhost:4000/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/15/WeChatTicket-summary.html</guid>
			</item>
		
			<item>
				<title>微信抢票｜在服务器端部署项目的发布版本</title>
				<description>&lt;p&gt;在服务器端部署发布项目时，除项目本身需要配置外，还需要更根据Web服务器的不同进行配置，
以下给出了使用Django自带服务器和uwsgi服务器的配置方法，均适用nginx进行转发。&lt;/p&gt;

&lt;h2 id=&quot;项目配置&quot;&gt;项目配置&lt;/h2&gt;
&lt;p&gt;1.修改&lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt;文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;DEBUG&quot;: false,
&quot;IGNORE_WECHAT_SIGNATURE&quot;: false,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.修改&lt;code class=&quot;highlighter-rouge&quot;&gt;WeChatTicket/settings.py&lt;/code&gt;文件，关闭&lt;code class=&quot;highlighter-rouge&quot;&gt;TEMPLATES&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;APP_DIRS&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TEMPLATES = [
  {
    ...
    'APP_DIRS': False,
    ...
    },
]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用django服务器&quot;&gt;使用Django服务器&lt;/h2&gt;
&lt;p&gt;1.修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/conf.d/wct.conf&lt;/code&gt;文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
 root /home/ubuntu/WeChatTicket/static;
 }
location /wechat {
 proxy_pass http://127.0.0.1:8000;
 }
location /api {
 proxy_pass http://127.0.0.1:8000;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.在8000端口运行Django服务器&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python manage.py runserver 0:8000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;也可以使进程在后台运行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(python manage.py runserver &amp;amp;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;需要关闭服务器进程时&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; lsof -i :8000
&amp;gt; kill -9 &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.重启nginx服务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; touch reload
&amp;gt; service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;使用uwsgi服务器&quot;&gt;使用uwsgi服务器&lt;/h2&gt;
&lt;p&gt;1.修改&lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/conf.d/wct.conf&lt;/code&gt;文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
 root /home/ubuntu/WeChatTicket/static;
 }
location /wechat {
 uwsgi_pass unix:///home/ubuntu/WeChatTicket/wct.sock;
 include /etc/nginx/uwsgi_params;
 }
location /api {
 uwsgi_pass unix:///home/ubuntu/WeChatTicket/wct.sock;
 include /etc/nginx/uwsgi_params;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;2.重启uwsgi&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sudo su
&amp;gt; ps -aux | grep uwsgi
&amp;gt; kill -9 &amp;lt;PID&amp;gt;
&amp;gt; exit

&amp;gt; uwsgi --ini uwsgi.ini
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;3.重启nginx&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; touch reload
&amp;gt; service nginx restart
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Thu, 12 Oct 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/12/WeChatTicket-server-release.html</link>
				<guid isPermaLink="true">http://localhost:4000/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/12/WeChatTicket-server-release.html</guid>
			</item>
		
			<item>
				<title>微信抢票｜利用SSH端口转发实现内网穿透</title>
				<description>&lt;p&gt;由于某些原因，清华校内网不再允许外网访问，给微信项目的本地开发造成了一定困难，为此可以SSH端口转发的方法进行“内网穿透”，即主动向外网服务器发起请求建立SSH通道，在服务器建立socket监听某个端口，将数据通过SSH通道发送给内网的本地服务器，处理后经同样方法进行回传。&lt;/p&gt;

&lt;p&gt;服务器端的配置方法见 &lt;a href=&quot;https://blog.magichc7.com/?p=5&amp;amp;from=timeline&quot;&gt;How to Set Up My First Server?&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-1&quot;&gt;STEP 1&lt;/h2&gt;
&lt;p&gt;修改服务器端nginx转发，将监听的80端口转发到闲置端口（以7000为例）:&lt;/p&gt;

&lt;p&gt;/etc/nginx/conf.d/wct.conf:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;location / {
 proxy_pass http://127.0.0.1:7000;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-2&quot;&gt;STEP 2&lt;/h2&gt;
&lt;p&gt;本地运行Django项目（假设运行在8000端口），并建立SSH远程转发，命令格式为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -R &amp;lt;remote port&amp;gt;:localhost:&amp;lt;local port&amp;gt; &amp;lt;username&amp;gt;@&amp;lt;host ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在本例中为：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh -R 7000:localhost:8000 ubuntu@&amp;lt;your ip&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;step-3&quot;&gt;STEP 3&lt;/h2&gt;
&lt;p&gt;经过以上两个步骤，即可通过服务器ip对本地运行的Django项目进行访问，但微信消息中的“绑定”、“帮助”等链接依然无法访问，这是因为获取的url仍为通过本地ip进行访问，为此需要对&lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;SITE_DOMAIN&quot;&lt;/code&gt;进行修改：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;SITE_DOMAIN&quot;: &quot;http://&amp;lt;your_server_ip&amp;gt;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;qa&quot;&gt;Q&amp;amp;A&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; 建立ssh连接时遇到：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Warning: remote port forwarding failed for listen port XXXX
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; 进入服务器，查询并结束占用端口的进程&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; sudo su
&amp;gt; netstat -tunlp
&amp;gt; kill -s 9 &amp;lt;PID&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
				<pubDate>Mon, 09 Oct 2017 00:00:00 +0800</pubDate>
				<link>http://localhost:4000/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/09/WeChatTicket-ssh-portforwarding.html</link>
				<guid isPermaLink="true">http://localhost:4000/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91/2017/10/09/WeChatTicket-ssh-portforwarding.html</guid>
			</item>
		
	</channel>
</rss>
